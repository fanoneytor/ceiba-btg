AWSTemplateFormatVersion: "2010-09-09"
Description: Fullstack CFN - Angular en S3+CloudFront, Spring Boot en EC2, Mongo Atlas externo

Parameters:
  ProjectName:
    Type: String
    Default: demo-fullstack
    Description: Nombre lógico para recursos

  BackendJarS3Key:
    Type: String
    Description: Key del artefacto JAR en S3 (ej. backend/app-1.0.0.jar)

  ArtifactVersion:
    Type: String
    Default: v1
    Description: Cambia este valor para forzar redeploy en EC2 (invalida cache y recarga servicio)

  MongoUri:
    Type: String
    NoEcho: true
    Description: Cadena de conexión completa a Mongo Atlas (mongodb+srv://...)

  BackendPort:
    Type: Number
    Default: 8080
    Description: Puerto interno donde corre Spring Boot

  InstanceType:
    Type: String
    Default: t3.small
    AllowedValues: [t3.micro, t3.small, t3.medium]
    Description: Tipo de instancia EC2 para backend

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Par de claves para acceso SSH (opcional para debugging)

  DefaultVpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC (usa la default)

  DefaultSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet de la VPC default

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0fff1b9a61dec8a5f # Amazon Linux 2023
    us-east-2:
      AMI: ami-00cf59bc9978eb266
    us-west-2:
      AMI: ami-014bfb3e585763f27

Resources:
  # ------------------------------------------------------------
  # Buckets S3
  # ------------------------------------------------------------
  AngularBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-frontend-${AWS::StackName}"
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  BackendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-backend-${AWS::StackName}"
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # OAI para CloudFront
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "${ProjectName}-oai"

  # Política para que CloudFront pueda leer AngularBucket
  AngularBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AngularBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontRead
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${AngularBucket}/*"

  # Distribución CloudFront
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        Origins:
          - Id: s3-angular-origin
            DomainName: !GetAtt AngularBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
          - Id: ec2-backend-origin
            DomainName: !GetAtt BackendEC2.PublicDnsName
            CustomOriginConfig:
              OriginProtocolPolicy: http-only # solo HTTP
              HTTPPort: 80
        DefaultCacheBehavior:
          TargetOriginId: s3-angular-origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
          Compress: true
        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: ec2-backend-origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: true
              Headers:
                - Authorization
                - Content-Type
            Compress: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

  # ------------------------------------------------------------
  # IAM Role & Instance Profile para EC2
  # ------------------------------------------------------------
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: s3-read-artifacts
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${BackendBucket}/${BackendJarS3Key}"
              - Effect: Allow
                Action: [s3:ListBucket]
                Resource: !Sub "arn:aws:s3:::${BackendBucket}"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref EC2Role]

  # ------------------------------------------------------------
  # Security Group backend
  # ------------------------------------------------------------
  BackendSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access for backend over HTTP (80)
      VpcId: !Ref DefaultVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # ------------------------------------------------------------
  # EC2 backend con Nginx + Spring Boot
  # ------------------------------------------------------------
  BackendEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AMI]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref KeyName
      SecurityGroupIds: [!Ref BackendSG]
      SubnetId: !Ref DefaultSubnetId
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/bash
          set -eux
          dnf update -y
          dnf install -y java-17-amazon-corretto nginx awscli

          # Crear carpeta de la app
          mkdir -p /opt/app

          # Descargar JAR desde S3
          aws s3 cp s3://${BackendBucket}/${BackendJarS3Key} /opt/app/app.jar

          # Crear servicio systemd
          cat >/etc/systemd/system/springboot.service <<SERVICE
          [Unit]
          Description=Spring Boot Service
          After=network.target

          [Service]
          Type=simple
          Environment=SPRING_PROFILES_ACTIVE=prod
          Environment=MONGO_URI=${MongoUri}
          Environment=SERVER_PORT=${BackendPort}
          ExecStart=/usr/bin/java -jar /opt/app/app.jar --server.port=${BackendPort} --spring.data.mongodb.uri=${MongoUri}
          Restart=always
          RestartSec=5
          User=ec2-user
          WorkingDirectory=/opt/app

          [Install]
          WantedBy=multi-user.target
          SERVICE

          # Configurar permisos
          chown ec2-user:ec2-user /opt/app/app.jar
          chmod 755 /opt/app/app.jar

          # Recargar systemd y arrancar Spring Boot
          systemctl daemon-reload
          systemctl enable springboot
          systemctl start springboot

          #Reemplazar nginx.conf por uno limpio (sin conflictos)
          cat >/etc/nginx/nginx.conf <<'NGINXCONF'
          user nginx;
          worker_processes auto;
          error_log /var/log/nginx/error.log warn;
          pid /var/run/nginx.pid;

          events { worker_connections 1024; }

          http {
              include       /etc/nginx/mime.types;
              default_type  application/octet-stream;

              log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                                '$status $body_bytes_sent "$http_referer" '
                                '"$http_user_agent" "$http_x_forwarded_for"';

              access_log  /var/log/nginx/access.log  main;

              sendfile        on;
              keepalive_timeout  65;

              include /etc/nginx/conf.d/*.conf;
          }
          NGINXCONF

          # Configuración del backend en conf.d
          cat >/etc/nginx/conf.d/backend.conf <<NGINX
          server {
            listen 80;
            server_name _;
            location /api/ {
              proxy_pass http://localhost:${BackendPort};
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
            }
            location / {
              return 200 'Backend running. Use /api for API endpoints.';
              add_header Content-Type text/plain;
            }
          }
          NGINX

          # Habilitar y arrancar Nginx
          systemctl daemon-reload
          systemctl enable nginx
          systemctl restart nginx

Outputs:
  CloudFrontURL:
    Description: URL de la distribución CloudFront para el frontend
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"

  AngularBucketOut:
    Description: Bucket S3 creado para frontend
    Value: !Ref AngularBucket

  BackendBucketOut:
    Description: Bucket S3 creado para backend
    Value: !Ref BackendBucket

  BackendPublicDNS:
    Description: DNS público de la instancia backend (Nginx escucha en 80)
    Value: !GetAtt BackendEC2.PublicDnsName
